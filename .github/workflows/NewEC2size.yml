name: Launch EC2 from AMI

on:
  workflow_dispatch:
    inputs:
      ami_id:
        description: 'Enter the AMI ID (e.g. ami-0abcdef1234567890)'
        required: true
      instance_type:
        description: 'Choose EC2 Instance Type'
        required: true
        default: 't2.micro'
        type: choice
        options:
          - t2.micro
          - t2.large
          - t2.xlarge
          - t2.2xlarge

jobs:
  launch-ec2:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1   # change region if needed

      - name: Fetch Subnets of AZ1 & AZ2
        id: get-subnets
        run: |
          echo "Fetching Subnet IDs from first two AZs..."

          # Get AZ names
          AZS=$(aws ec2 describe-availability-zones \
            --query "AvailabilityZones[*].ZoneName" \
            --output text)
          AZ1=$(echo $AZS | awk '{print $1}')
          
          echo "Selected AZ1: $AZ1"
          # Get subnet for each AZ
          
          SUBNET1=$(aws ec2 describe-subnets \
            --filters "Name=availability-zone,Values=$AZ1" \
            --query "Subnets[0].SubnetId" \
            --output text)
          echo "SUBNET1=$SUBNET1" >> $GITHUB_ENV
          
      - name: Fetch Default Security Group
        id: get-sg
        run: |
          echo "Fetching Default Security Group..."

          # Get VPC ID from SUBNET1
          VPC_ID=$(aws ec2 describe-subnets \
            --subnet-ids $SUBNET1 \
            --query "Subnets[0].VpcId" \
            --output text)

          # Get Default Security Group for that VPC
          DEFAULT_SG=$(aws ec2 describe-security-groups \
            --filters "Name=vpc-id,Values=$VPC_ID" "Name=group-name,Values=default" \
            --query "SecurityGroups[0].GroupId" \
            --output text)

          echo "DEFAULT_SG=$DEFAULT_SG" >> $GITHUB_ENV

      - name: Launch EC2 Instance
        run: |
          echo "Launching EC2 Instance with AMI: ${{ github.event.inputs.ami_id }} and Type: ${{ github.event.inputs.instance_type }}"
          echo "Using Subnet: $SUBNET1 and Security Group: $DEFAULT_SG"

          INSTANCE_ID=$(aws ec2 run-instances \
            --image-id ${{ github.event.inputs.ami_id }} \
            --instance-type ${{ github.event.inputs.instance_type }} \
            --key-name mykey \ 
            --security-group-ids $DEFAULT_SG \
            --subnet-id $SUBNET1 \
            --associate-public-ip-address \
            --query 'Instances[0].InstanceId' \
            --output text)

          echo "Launched EC2 Instance with ID: $INSTANCE_ID"
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Get Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances \
            --instance-ids $INSTANCE_ID \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
          echo "Public IP: $PUBLIC_IP"
